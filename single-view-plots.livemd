# Single-view plots

```elixir
Mix.install([
  {:vega_lite, "~> 0.1.5"},
  {:kino_vega_lite, "~> 0.1.1"},
  :jason
])
```

## Section

```elixir
alias VegaLite, as: Vl
```

## Simple bar chart

A bar chart encodes quantitative values as the extent of rectangular bars.

```elixir
data = [
  %{"a" => "A", "b" => 28},
  %{"a" => "B", "b" => 55},
  %{"a" => "C", "b" => 43},
  %{"a" => "D", "b" => 91},
  %{"a" => "E", "b" => 81},
  %{"a" => "F", "b" => 53},
  %{"a" => "G", "b" => 19},
  %{"a" => "H", "b" => 87},
  %{"a" => "I", "b" => 52}
]

Vl.new()
|> Vl.data_from_values(data)
|> Vl.mark(:bar)
|> Vl.encode(:x, field: :a, type: :nominal, axis: [label_angle: 40])
|> Vl.encode(:y, field: :b, type: :quantitative)
```

## Responsive Bar Chart

The bar gets automatically resized based on container size. To see how the bar gets automatically resized try this in the editor.

**I couldÂ´t use "width": "container".** Is this possible in livebook?

```elixir
Vl.new(width: 300, heigh: 250)
|> Vl.data_from_url("https://vega.github.io/vega-lite/examples/data/cars.json")
|> Vl.mark(:bar)
|> Vl.encode(:x, field: "Origin")
|> Vl.encode(:y, aggregate: :count, title: "Number of Cars")
```

## Section

## Aggregate Bar Chart

A bar chart showing the US population distribution of age groups in 2000.

```elixir
Vl.new(
  height: [step: 17],
  description: "A bar chart showing the US population distribution of age groups in 2000."
)
|> Vl.data_from_url("https://vega.github.io/vega-lite/examples/data/population.json")
|> Vl.transform(filter: "datum.year == 2000")
|> Vl.mark(:bar)
|> Vl.encode(:y, field: "age")
|> Vl.encode(:x, field: "people", aggregate: :sum, title: "population")
```

## Aggregate Bar Chart (Sorted)

A bar chart that sorts the y-values by the x-values.

```elixir
Vl.new(
  height: [step: 17],
  description: "A bar chart that sorts the y-values by the x-values."
)
|> Vl.data_from_url("https://vega.github.io/vega-lite/examples/data/population.json")
|> Vl.transform(filter: "datum.year == 2000")
|> Vl.mark(:bar)
|> Vl.encode(:y, field: "age", type: :ordinal, sort: "-x")
|> Vl.encode(:x, field: "people", aggregate: :sum, title: "population")
```

## Grouped Bar Chart

Read [here](https://vega.github.io/editor/#/examples/vega-lite/size.html#offset-step) for more details about how to set step size for grouped bar.

```elixir
data = [
  %{"category" => "A", "group" => "x", "value" => 0.1},
  %{"category" => "A", "group" => "y", "value" => 0.6},
  %{"category" => "A", "group" => "z", "value" => 0.9},
  %{"category" => "B", "group" => "x", "value" => 0.7},
  %{"category" => "B", "group" => "y", "value" => 0.2},
  %{"category" => "B", "group" => "z", "value" => 1.1},
  %{"category" => "C", "group" => "x", "value" => 0.6},
  %{"category" => "C", "group" => "y", "value" => 0.1},
  %{"category" => "C", "group" => "z", "value" => 0.2}
]

Vl.new()
|> Vl.data_from_values(data)
|> Vl.mark(:bar)
|> Vl.encode(:x, field: "category")
|> Vl.encode(:y, field: "value", type: :quantitative)
|> Vl.encode(:x_offset, field: "group")
|> Vl.encode(:color, field: "group")
```

## Grouped Bar Chart (Multiple Measure with Repeat)

Read [here](https://vega.github.io/editor/#/examples/vega-lite/size.html#offset-step) for more details about how to set step size for grouped bar.

```elixir
Vl.new()
|> Vl.data_from_url("https://vega.github.io/vega-lite/examples/data/movies.json")
|> Vl.repeat(
  layer: ["Worldwide Gross", "US Gross"],
  Vl.new()
  |> Vl.mark(:bar)
  |> Vl.encode(:x, field: "Major Genre", type: :nominal)
  |> Vl.encode_repeat(:y, field: [repeat: :layer], aggregate: :sum, type: :quantitative, title: "Total Gross")
  |> Vl.encode_repeat(:color, datum: [repeat: :layer])
  |> Vl.encode_repeat(:x_offset, datum: [repeat: :layer])
)
|> Vl.to_spec()

```

## Section

```elixir
Vl.from_json("""
{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "data": {
    "url": "https://vega.github.io/vega-lite/examples/data/movies.json"
  },
  "repeat": {"layer": ["Worldwide Gross", "US Gross"]},
  "spec": {
    "mark": "bar",
    "encoding": {
      "x": {
        "field": "Major Genre",
        "type": "nominal"
      },
      "y": {
        "aggregate": "sum",
        "field": {"repeat": "layer"},
        "type": "quantitative",
        "title": "Total Gross"
      },
      "color": {"datum": {"repeat": "layer"}, "title": "Gross"},
      "xOffset": {"datum": {"repeat": "layer"}}
    }
  },
  "config": {
    "mark": {"invalid": null}
  }
}
""")
```
