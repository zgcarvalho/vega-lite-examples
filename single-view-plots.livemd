# Single-view plots

```elixir
Mix.install([
  {:vega_lite, "~> 0.1.5"},
  {:kino_vega_lite, "~> 0.1.1"},
  :jason
])

alias VegaLite, as: Vl
```

## Simple bar chart

A bar chart encodes quantitative values as the extent of rectangular bars.

```elixir
data = [
  %{"a" => "A", "b" => 28},
  %{"a" => "B", "b" => 55},
  %{"a" => "C", "b" => 43},
  %{"a" => "D", "b" => 91},
  %{"a" => "E", "b" => 81},
  %{"a" => "F", "b" => 53},
  %{"a" => "G", "b" => 19},
  %{"a" => "H", "b" => 87},
  %{"a" => "I", "b" => 52}
]

Vl.new()
|> Vl.data_from_values(data)
|> Vl.mark(:bar)
|> Vl.encode(:x, field: :a, type: :nominal, axis: [label_angle: 40])
|> Vl.encode(:y, field: :b, type: :quantitative)
```

## Responsive Bar Chart

The bar gets automatically resized based on container size. To see how the bar gets automatically resized try this in the editor.

**I couldÂ´t use "width": "container".** Is this possible in livebook?

```elixir
Vl.new(width: 300, heigh: 250)
|> Vl.data_from_url("https://vega.github.io/vega-lite/examples/data/cars.json")
|> Vl.mark(:bar)
|> Vl.encode(:x, field: "Origin")
|> Vl.encode(:y, aggregate: :count, title: "Number of Cars")
```

## Section

## Aggregate Bar Chart

A bar chart showing the US population distribution of age groups in 2000.

```elixir
Vl.new(
  height: [step: 17],
  description: "A bar chart showing the US population distribution of age groups in 2000."
)
|> Vl.data_from_url("https://vega.github.io/vega-lite/examples/data/population.json")
|> Vl.transform(filter: "datum.year == 2000")
|> Vl.mark(:bar)
|> Vl.encode(:y, field: "age")
|> Vl.encode(:x, field: "people", aggregate: :sum, title: "population")
```

## Aggregate Bar Chart (Sorted)

A bar chart that sorts the y-values by the x-values.

```elixir
Vl.new(
  height: [step: 17],
  description: "A bar chart that sorts the y-values by the x-values."
)
|> Vl.data_from_url("https://vega.github.io/vega-lite/examples/data/population.json")
|> Vl.transform(filter: "datum.year == 2000")
|> Vl.mark(:bar)
|> Vl.encode(:y, field: "age", type: :ordinal, sort: "-x")
|> Vl.encode(:x, field: "people", aggregate: :sum, title: "population")
```

## Grouped Bar Chart

Read [here](https://vega.github.io/editor/#/examples/vega-lite/size.html#offset-step) for more details about how to set step size for grouped bar.

```elixir
data = [
  %{"category" => "A", "group" => "x", "value" => 0.1},
  %{"category" => "A", "group" => "y", "value" => 0.6},
  %{"category" => "A", "group" => "z", "value" => 0.9},
  %{"category" => "B", "group" => "x", "value" => 0.7},
  %{"category" => "B", "group" => "y", "value" => 0.2},
  %{"category" => "B", "group" => "z", "value" => 1.1},
  %{"category" => "C", "group" => "x", "value" => 0.6},
  %{"category" => "C", "group" => "y", "value" => 0.1},
  %{"category" => "C", "group" => "z", "value" => 0.2}
]

Vl.new()
|> Vl.data_from_values(data)
|> Vl.mark(:bar)
|> Vl.encode(:x, field: "category")
|> Vl.encode(:y, field: "value", type: :quantitative)
|> Vl.encode(:x_offset, field: "group")
|> Vl.encode(:color, field: "group")
```

## Grouped Bar Chart (Multiple Measure with Repeat)

Read [here](https://vega.github.io/editor/#/examples/vega-lite/size.html#offset-step) for more details about how to set step size for grouped bar.

```elixir
Vl.new()
|> Vl.data_from_url("https://vega.github.io/vega-lite/examples/data/movies.json")
|> Vl.repeat(
  [layer: ["Worldwide Gross", "US Gross"]],
  Vl.new()
  |> Vl.mark(:bar)
  |> Vl.encode(:x, field: "Major Genre", type: :nominal)
  |> Vl.encode_repeat(:y, :layer, aggregate: :sum, type: :quantitative, title: "Total Gross")
  |> Vl.encode(:color, datum: [repeat: :layer], type: :nominal, title: "Gross")
  |> Vl.encode(:x_offset, datum: [repeat: :layer])
)

# |> Vl.config(mark: [invalid: :null])
# |> Vl.to_spec()
```

## Stacked Bar Chart



```elixir
Vl.new()
|> Vl.data_from_url("https://vega.github.io/vega-lite/examples/data/seattle-weather.csv")
|> Vl.mark(:bar)
|> Vl.encode_field(:x, "date", type: :ordinal, time_unit: :month, title: "Month of the year")
|> Vl.encode(:y, aggregate: :count, type: :quantitative)
|> Vl.encode_field(:color, "weather",
  type: :nominal,
  scale: [
    domain: ["sun", "fog", "drizzle", "rain", "snow"],
    range: ["#e7ba52", "#c7c7c7", "#aec7e8", "#1f77b4", "#9467bd"]
  ]
)
```

## Stacked Bar Chart with Rounded Corners

```elixir
Vl.new()
|> Vl.data_from_url("https://vega.github.io/vega-lite/examples/data/seattle-weather.csv")
|> Vl.mark(:bar, corner_radius_top_left: 10, corner_radius_top_right: 10)
|> Vl.encode_field(:x, "date", type: :ordinal, time_unit: :month, title: "Month of the year")
|> Vl.encode(:y, aggregate: :count, type: :quantitative)
|> Vl.encode_field(:color, "weather")
```

## Horizontal Stacked Bar Chart

```elixir
Vl.new()
|> Vl.data_from_url("https://vega.github.io/vega-lite/examples/data/barley.json")
|> Vl.mark(:bar)
|> Vl.encode_field(:y, "variety")
|> Vl.encode_field(:x, "yield", aggregate: :sum)
|> Vl.encode_field(:color, "site")
```

## Normalized (Percentage) Stacked Bar Chart

```elixir
Vl.new(width: [step: 13])
|> Vl.data_from_url("https://vega.github.io/vega-lite/examples/data/population.json")
|> Vl.transform(filter: "datum.year == 2000")
|> Vl.transform(calculate: "datum.sex == 2 ? 'Female' : 'Male'", as: "gender")
|> Vl.mark(:bar)
|> Vl.encode_field(:x, "age")
|> Vl.encode_field(:y, "people", aggregate: :sum, stack: :normalize)
|> Vl.encode_field(:color, "gender", scale: [range: ["#675193", "#ca8861"]])
```

## Normalized (Percentage) Stacked Bar Chart With Labels

```elixir
Vl.new()
|> Vl.data_from_url("https://vega.github.io/vega-lite/examples/data/population.json")
|> Vl.transform(filter: "datum.year == 2000")
|> Vl.transform(calculate: "datum.sex == 2 ? 'Female' : 'Male'", as: "gender")
|> Vl.encode_field(:y, "age")
|> Vl.layers([
  Vl.new()
  |> Vl.mark(:bar)
  |> Vl.encode_field(:x, "people", aggregate: :sum, stack: :normalize, title: "population")
  |> Vl.encode_field(:color, "gender", scale: [range: ["#675193", "#ca8861"]]),
  Vl.new()
  |> Vl.mark(:text, opacity: 0.9, color: :white)
  |> Vl.encode_field(:x, "people", aggregate: :sum, stack: :normalize, band_position: 0.5)
  |> Vl.encode_field(:text, "people", aggregate: :sum, title: "population")
  |> Vl.encode_field(:detail, "gender")
])
```

## Gantt Chart (Ranged Bar Marks)

A simple bar chart with ranged data (aka Gantt Chart).

```elixir
data = [
  %{"task" => "A", "start" => 1, "end" => 3},
  %{"task" => "B", "start" => 3, "end" => 8},
  %{"task" => "C", "start" => 8, "end" => 10}
]

Vl.new()
|> Vl.data_from_values(data)
|> Vl.mark(:bar)
|> Vl.encode_field(:y, "task", type: :ordinal)
|> Vl.encode_field(:x, "start", type: :quantitative)
|> Vl.encode_field(:x2, "end")
```

## Section

```elixir
Vl.from_json("""
{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A simple bar chart with ranged data (aka Gantt Chart).",
  "data": {
    "values": [
      {"task": "A", "start": 1, "end": 3},
      {"task": "B", "start": 3, "end": 8},
      {"task": "C", "start": 8, "end": 10}
    ]
  },
  "mark": "bar",
  "encoding": {
    "y": {"field": "task", "type": "ordinal"},
    "x": {"field": "start", "type": "quantitative"},
    "x2": {"field": "end"}
  }
}
""")
```
